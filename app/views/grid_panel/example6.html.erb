<% title "Netzke::GridPanel (6)" %>

<h2>Example 6: Dynamic configuration</h2>
<p>Real power of the Netzke framework lies in its baked-in dynamic configurability. GridPanel and FormPanel from netzke-basepack provide interface to its configuration options. In real-life application these options are automatically stored per user/role, and can be quickly changed by the administrator with the help of masquerading. GridPanel below is configured to provide access to its configuration panel (click the "gear" tool on the right top of it) - use it to change different functional and representational aspects of this GridPanel instance. Besides that, the FormPanel-based forms for creating/editing records inherit the configuration mode, hence they are also configurable. And, finally, the search form is configurable as well: you can specify which criteria for search as you wish.</p>
<p>Code:</p>
<% coderay do %>
netzke :configurable_clerks, :class_name => "Wrapper", :item => {
  :class_name => "GridPanel", 
  :model => 'Clerk',
  :ext_config => {
    :mode => :config, # here we enable the configuration mode
    :title => "Configurable clerks"
  }
}
<% end %>
<p>We wrap the grid up so that after changing its configuration it can be automatically reloaded without the need to reload the page. Btw, this touches another powerful concept behind the Netzke framework: ability to easily nest widgets.</p>
<p>Result:</p>
<%= netzke :configurable_clerks, :class_name => "Wrapper", :item => {
  :class_name => "GridPanel", 
  :model => 'Clerk',
  :persistent_config => true,
  :ext_config => {
    :mode => :config, # here we enable the configuration mode
    :title => "Configurable clerks"
  }
} %>